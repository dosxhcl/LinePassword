var CHANNEL_ACCESS_TOKEN = '/*TOKEN from LINE*/';
var replyUrl = 'https://api.line.me/v2/bot/message/reply';
var messageCache = CacheService.getPublicCache();

/**
 *  Post Function as web app for LINE to call
 *  
 *  @param  e    event received contain reply token
 *
 *  @retvl  None
 */
function doPost(e) 
{
  var msg = JSON.parse(e.postData.contents);

  var replyToken = msg.events[0].replyToken;
  var msgType    = msg.events[0].type;
  var userID     = msg.events[0].source.userId;
  
  if(typeof replyToken === 'undefined') 
      return;

  if(msgType == 'message')
  {
    var userMessage = msg.events[0].message.text;
    var status = processMessage(userMessage);
    var theReplyMsg = messageCache.get('replyMsg');
    if(theReplyMsg != null)
    {
      messageCache.remove('replyMsg');
      if(status == 0)
        replyGeneral(msg, theReplyMsg);
      else
        replyText(msg, theReplyMsg);
    }
  }
}

/**
 *  Function to reply the message in JSON format
 *  
 *  @param  e              event received contain reply token
 *  @param  replayMessage  string to reply
 *
 *  @retvl  None
 */
function replyGeneral(e, msgContain)
{
  var jsonMessage;
  var replyData;
  
  jsonMessage = 
  {
    'replyToken': e.events[0].replyToken,
    'messages': [JSON.parse(msgContain)]
  };
  
  replyData = 
  {
    'headers': 
    {
      'Content-Type': 'application/json; charset=UTF-8',
      'Authorization': 'Bearer ' + CHANNEL_ACCESS_TOKEN,
    },
    'method': 'post',
    'payload': JSON.stringify(jsonMessage)
  };
  
  UrlFetchApp.fetch(replyUrl,replyData);
}

/**
 *  Function to reply the message in text format
 *  
 *  @param  e              event received contain reply token
 *  @param  replayMessage  string to reply
 *
 *  @retvl  None
 */
function replyText(e, replayMessage)
{
  var jsonMessage;
  var replyData;
  
  jsonMessage = 
  {
    'type': 'text',
    'text': replayMessage,
  };
  
  replyGeneral(e, JSON.stringify(jsonMessage));
}

/**
 *  Function to take the message from user and do action accordingly
 *  
 *  @param  messageContain  the message user typed
 *
 *  @retvl  0 - Success
 *          1 - List
 *          2 - Updated
 *          8 - Invalid Message
 */
function processMessage(messageContain)
{
  var passwordSheet = SpreadsheetApp.openById(getPassSheetId()).getActiveSheet();
  var accountsInfo  = loadAccounts(passwordSheet);
  var account       = messageContain.split("::");
  
  var existIndex    = checkExistence(accountsInfo, account[0]);
  var thePasswordInfo;
  
  if(account[0].toLowerCase() == 'list')
  {
    prepareListMessage(accountsInfo);
    return 1;
  }
  
  if(account.length == 4)
  {
    recordAccount(passwordSheet, accountsInfo, account, existIndex);
    messageCache.put('replyMsg', "Passbook Updated!");
    return 2;
  }
  else
  {
    /// if the account does not exist
    if(existIndex > accountsInfo.length)
    {
      messageCache.put('replyMsg', "Account does not exist!");
      return 8;
    }
    else
    {
      thePasswordInfo = getPasswordInfo(accountsInfo, existIndex);
      prepareInfoMessage(thePasswordInfo);      
    }
  }
  return 0;
}

/**
 *  Function to prepare the Json format message and put in cache
 *  
 *  @param  accountsInfo  the passbook info
 *
 *  @retvl  listString
 */
function prepareListMessage(accountsInfo)
{
  var listString = "";
  for(var i=0; i<accountsInfo.length; i++)
  {
    listString = listString + accountsInfo[i][0] + "\n";
  }
  messageCache.put('replyMsg', listString);
}

/**
 *  Function to prepare the Json format message and put in cache
 *  
 *  @param  None
 *
 *  @retvl  None
 */
function prepareInfoMessage(thePasswordInfo)
{
  var passInfoMessage = 
  {
    "type": "flex",
    "altText": "This is a Flex Message",
    "contents":
    {
      "type": "bubble",
      "styles": {
        "footer": {
          "separator": true
        }
      },
      "body": {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "text",
            "text": thePasswordInfo[0],
            "weight": "bold",
            "size": "xl",
            "margin": "md"
          },
          {
            "type": "separator",
            "margin": "md"
          },
          {
            "type": "box",
            "layout": "vertical",
            "margin": "md",
            "spacing": "sm",
            "contents": [
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "text",
                    "text": "ID:",
                    "size": "sm",
                    "color": "#555555",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": thePasswordInfo[1],
                    "size": "sm",
                    "color": "#111111",
                    "align": "end"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "text",
                    "text": "Account:",
                    "size": "sm",
                    "color": "#555555",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": thePasswordInfo[2],
                    "size": "sm",
                    "color": "#111111",
                    "align": "end"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "text",
                    "text": "Password:",
                    "size": "sm",
                    "color": "#555555",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": thePasswordInfo[3],
                    "size": "sm",
                    "color": "#111111",
                    "align": "end"
                  }
                ]
              }
            ]
          },
        ]
      }
    }
  };
  messageCache.put('replyMsg',JSON.stringify(passInfoMessage));
}
